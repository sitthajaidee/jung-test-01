service: jung-test01
frameworkVersion: "3"

plugins:
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: ap-southeast-1
  iam:
    role:
      name: jung-test01-lambda-role
      statements:
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource: "*"
          Condition:
            StringEquals:
              aws:PrincipalArn: arn:aws:iam::516577126946:user/sitthaja

functions:
  hello:
    handler: handler/handler.hello
  goodmorning:
    handler: handler/goodmorning.goodmorning
  axiostrigger:
    handler: handler/axiostrigger.axiostrigger
  queryproduct:
    handler: handler/queryproduct.queryproduct

stepFunctions:
  stateMachines:
    jungTest02StateMachine:
      events:
        - http:
            path: axiostrigger
            method: get
            action: StartSyncExecution
            request:
              template:
                application/json: |
                  #set($includeHeaders = true)
                  #set($includeQueryString = true)
                  #set($includePath = true)
                  #set($requestContext = '')

                  #set($inputString = '')
                  #set($allParams = $input.params())
                  {
                    "stateMachineArn": "arn:aws:states:${self:provider.region}:516577126946:stateMachine:jung-test-step-function-02",
                    #set($inputString = "$inputString,@@body@@: $input.body")

                  #if ($includeHeaders)
                    #set($inputString = "$inputString, @@header@@:{")
                    #foreach($paramName in $allParams.header.keySet())
                      #set($inputString = "$inputString @@$paramName@@: @@$util.escapeJavaScript($allParams.header.get($paramName))@@")
                      #if($foreach.hasNext)
                        #set($inputString = "$inputString,")
                      #end
                    #end
                    #set($inputString = "$inputString }")
                  #end

                  #if ($includeQueryString)
                    #set($inputString = "$inputString, @@querystring@@:{")
                    #foreach($paramName in $allParams.querystring.keySet())
                      #set($inputString = "$inputString @@$paramName@@: @@$util.escapeJavaScript($allParams.querystring.get($paramName))@@")
                      #if($foreach.hasNext)
                        #set($inputString = "$inputString,")
                      #end
                    #end
                    #set($inputString = "$inputString }")
                  #end

                  #if ($includePath)
                    #set($inputString = "$inputString, @@path@@:{")
                    #foreach($paramName in $allParams.path.keySet())
                      #set($inputString = "$inputString @@$paramName@@: @@$util.escapeJavaScript($allParams.path.get($paramName))@@")
                      #if($foreach.hasNext)
                        #set($inputString = "$inputString,")
                      #end
                    #end
                    #set($inputString = "$inputString }")
                  #end

                  #if($requestContext && !$requestContext.empty)
                    #set($inputString = "$inputString,")
                    #set($inputString = "$inputString @@requestContext@@: $requestContext")
                  #end

                  #set($inputString = "$inputString}")
                  #set($inputString = $inputString.replaceAll("@@",'"'))
                  #set($len = $inputString.length() - 1)
                  "input": "{$util.escapeJavaScript($inputString.substring(1,$len))}"
                  }

                # #set( $body = $util.escapeJavaScript($input.json('$')) )
                # {
                #   "input": { "queryStringParameters": { "n": "$input.params('n')" } },
                #   "stateMachineArn": "arn:aws:states:${self:provider.region}:516577126946:stateMachine:jung-test-step-function-02"
                # }
            response:
              headers:
                Content-Type: "'application/json'"
                X-Application-Id: "'copy from pwow'"
              template:
                application/json: |
                  #set( $output = $util.parseJson($input.json('$.output')) )
                  $output
        - http:
            path: queryproduct
            method: get
            action: StartSyncExecution
            request:
              template:
                application/json: |
                  #set( $body = $util.escapeJavaScript($input.json('$')) )
                  {
                    "input": "$body",
                    "stateMachineArn": "arn:aws:states:${self:provider.region}:516577126946:stateMachine:jung-test-step-function-02"
                  }
            response:
              headers:
                Content-Type: "'application/json'"
                X-Application-Id: "'copy from pwow'"
              template:
                application/json: |
                  #set( $output = $util.parseJson($input.json('$.output')) )
                  $output
      name: jung-test-step-function-02
      type: EXPRESS
      definition:
        StartAt: Axiostrigger
        States:
          Axiostrigger:
            Type: Task
            Resource:
              Fn::GetAtt: [axiostrigger, Arn]
            Parameters:
              queryStringParameters.$: "$.input.queryStringParameters"
            ResultPath: "$.axiostriggerResult"
            Next: QueryProduct
          QueryProduct:
            Type: Task
            Resource:
              Fn::GetAtt: [queryproduct, Arn]
            InputPath: "$.axiostriggerResult"
            End: true
  logs:
    level: ALL
    frameworkLambda: true
    stateMachineLambda: true
